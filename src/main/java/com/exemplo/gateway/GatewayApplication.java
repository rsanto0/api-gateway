package com.exemplo.gateway;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;

/**
 * API Gateway - Ponto de entrada √∫nico para microservi√ßos
 * 
 * RESPONSABILIDADES:
 * ‚Ä¢ Roteamento: Direciona requisi√ß√µes para microservi√ßos corretos
 * ‚Ä¢ Proxy de Autentica√ß√£o: Delega valida√ß√£o JWT para Auth Service
 * ‚Ä¢ Headers: Injeta informa√ß√µes de usu√°rio (X-User-Id, X-User-Login, X-User-Role)
 * ‚Ä¢ Centraliza√ß√£o: Unifica acesso a m√∫ltiplos servi√ßos em uma √∫nica porta
 * ‚Ä¢ Proxy Inteligente: Aplica filtros baseado em rotas
 * 
 * FLUXO:
 * Cliente ‚Üí Gateway (8080) ‚Üí Auth Service (8081) | Sistema Ponto (8082)
 */
@SpringBootApplication
public class GatewayApplication {
    
    private static final Logger logger = LoggerFactory.getLogger(GatewayApplication.class);
    
    /**
     * M√©todo principal que inicializa o API Gateway
     * @param args argumentos da linha de comando
     */
    public static void main(String[] args) {
        logger.info("[GATEWAY] Iniciando API Gateway...");
        SpringApplication.run(GatewayApplication.class, args);
    }
    
    /**
     * Evento executado quando aplica√ß√£o est√° pronta
     */
    @EventListener(ApplicationReadyEvent.class)
    public void onApplicationReady() {
        logger.info("[GATEWAY] ‚úÖ API Gateway iniciado com sucesso!");
        logger.info("[GATEWAY] üöÄ Servidor rodando na porta 8080");
        logger.info("[GATEWAY] üîó Rotas configuradas:");
        logger.info("[GATEWAY]   ‚Ä¢ /auth/** ‚Üí Auth Service (8081) [P√öBLICO]");
        logger.info("[GATEWAY]   ‚Ä¢ /api/** ‚Üí Sistema Ponto (8082) [PROTEGIDO]");
        logger.info("[GATEWAY] üîê Filtro JWT ativo para rotas protegidas");
    }
}